// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String         @id @default(cuid())
  email       String         @unique
  auth0Id     String         @unique
  name        String?
  canvasToken String?        // Encrypted Canvas LMS API token (for Quercus integration)
  projects    Project[]      // User's projects (shown in dashboard)
  createdAt   DateTime       @default(now())
}

// Project - Container for canvas and files (shown in dashboard)
model Project {
  id          String       @id @default(cuid())
  name        String       // Project name (shown in dashboard)
  description String?      @db.Text // Optional project description
  
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Quercus (Canvas LMS) integration
  quercusCourseId String?  // Canvas LMS course ID if imported from Quercus
  
  // Project contains ONE canvas
  canvas      FlowCanvas?
  
  // Project contains its own files (isolated per project)
  files       File[]
  
  // Metadata
  thumbnail   String?      // Optional thumbnail/preview image URL
  lastOpenedAt DateTime?   // Track when user last opened this project
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  @@index([userId, lastOpenedAt])
  @@index([userId, quercusCourseId])
}

model File {
  id          String               @id @default(cuid())
  name        String
  type        String               // pdf, pptx, mp4, docx
  url         String
  key         String               // UploadThing file key for deletion
  size        Int                  // File size in bytes
  
  // Files belong to a project (not directly to user)
  projectId   String
  project     Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Quercus integration
  quercusFileId String?           // Canvas LMS file ID if imported from Quercus
  
  transcripts Transcript[]
  sourceNodes SourceMaterialNode[] // Canvas nodes using this file
  createdAt   DateTime             @default(now())
  
  @@index([projectId])
  @@index([quercusFileId])
}

model Transcript {
  id          String               @id @default(cuid())
  content     String               @db.Text
  fileId      String
  file        File                 @relation(fields: [fileId], references: [id])
  outputs     Output[]
  sourceNodes SourceMaterialNode[] // Canvas nodes using this transcript
  createdAt   DateTime             @default(now())
}

model Output {
  id           String     @id @default(cuid())
  type         String     // notes, flashcards, quiz, slides
  content      Json
  transcriptId String
  transcript   Transcript @relation(fields: [transcriptId], references: [id])
  createdAt    DateTime   @default(now())
  agentNode    AgentNode? // Link to the agent node that generated this
}

// ============================================
// REACT FLOW CANVAS MODELS
// ============================================

// Main canvas - represents one study session/workflow
// ONE canvas per project
model FlowCanvas {
  id        String      @id @default(cuid())
  
  // Canvas belongs to a project (one-to-one)
  projectId String      @unique
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Single source material node (the root/constant)
  sourceNodeId String?   @unique
  sourceNode   SourceMaterialNode? @relation(fields: [sourceNodeId], references: [id], onDelete: SetNull)
  
  // Canvas viewport state (saved per user session)
  zoom      Float       @default(1.0)     // Zoom level (0.1 to 2.0 typically)
  viewportX Float       @default(0)       // Viewport X position
  viewportY Float       @default(0)       // Viewport Y position
  
  // Relations - multiple agent nodes can exist
  agentNodes AgentNode[]
  edges      CanvasEdge[]
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// Source material node (study materials - files/transcripts)
// Only ONE per canvas - the root of the flow
model SourceMaterialNode {
  id          String      @id @default(cuid())
  
  // React Flow node properties
  nodeId      String      // React Flow node ID (for client-side)
  
  // Position on canvas
  positionX   Float
  positionY   Float
  
  // Link to the actual file/transcript
  fileId      String?
  file        File?       @relation(fields: [fileId], references: [id], onDelete: SetNull)
  transcriptId String?
  transcript  Transcript? @relation(fields: [transcriptId], references: [id], onDelete: SetNull)
  
  // Display metadata
  title       String      // Display name on canvas
  preview     String?     @db.Text // Short preview of content
  
  // Canvas relation (one-to-one)
  canvas      FlowCanvas?
  
  // This source can connect to multiple agent nodes via edges
  edgesFrom   CanvasEdge[] @relation("SourceEdge")
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@unique([nodeId])
}

// AI Agent node (flashcard, quiz, notes, etc.)
// MULTIPLE can exist per canvas - these chain together
model AgentNode {
  id           String      @id @default(cuid())
  canvasId     String
  canvas       FlowCanvas  @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  
  // React Flow node properties
  nodeId       String      // React Flow node ID (for client-side)
  
  // Position on canvas
  positionX    Float
  positionY    Float
  
  // Node dimensions (optional, for consistency)
  width        Float?
  height       Float?
  
  // Node state
  isCollapsed  Boolean     @default(false)  // For expandable nodes
  
  // Agent configuration
  agentType    AgentType   // flashcard, quiz, notes, slides, summary
  status       AgentStatus @default(idle) // idle, processing, completed, error
  
  // Agent settings (stored as JSON for flexibility)
  config       Json?       // Agent-specific configuration
  
  // Generated content tracking
  outputId     String?     @unique
  output       Output?     @relation(fields: [outputId], references: [id], onDelete: SetNull)
  
  // Error tracking
  errorMessage String?     @db.Text
  
  // Processing metadata
  processedAt  DateTime?   // When last processed
  
  // Edge relations - agents can receive from source or other agents, and output to other agents
  edgesTo      CanvasEdge[] @relation("AgentInput")   // Incoming edges
  edgesFrom    CanvasEdge[] @relation("AgentOutput")  // Outgoing edges
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@unique([canvasId, nodeId])
  @@index([canvasId, agentType])
  @@index([agentType, status])
}

// Edge connecting nodes (data flow)
// Represents: source → agent OR agent → agent
model CanvasEdge {
  id         String     @id @default(cuid())
  canvasId   String
  canvas     FlowCanvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  
  // React Flow edge properties
  edgeId     String     // React Flow edge ID (for client-side)
  
  // Connection - can be from source OR from another agent
  sourceType EdgeSourceType  // source_material or agent
  
  // If sourceType is source_material
  sourceNodeId String?
  sourceNode   SourceMaterialNode? @relation("SourceEdge", fields: [sourceNodeId], references: [id], onDelete: Cascade)
  
  // If sourceType is agent
  sourceAgentId String?
  sourceAgent   AgentNode? @relation("AgentOutput", fields: [sourceAgentId], references: [id], onDelete: Cascade)
  
  // Target is always an agent (agents can't output to source)
  targetAgentId String
  targetAgent   AgentNode @relation("AgentInput", fields: [targetAgentId], references: [id], onDelete: Cascade)
  
  // Edge styling (optional)
  type       String?    @default("default") // default, smoothstep, step, straight
  animated   Boolean    @default(false)
  
  // Edge label (optional)
  label      String?
  
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  
  @@unique([canvasId, edgeId])
  @@index([sourceNodeId])
  @@index([sourceAgentId])
  @@index([targetAgentId])
}

// ============================================
// ENUMS
// ============================================

enum EdgeSourceType {
  source_material // Edge from source material node
  agent          // Edge from another agent node
}

enum AgentType {
  flashcard      // Flashcard generator
  quiz          // Quiz generator
  notes         // Notes generator
  slides        // Slide deck generator
  summary       // Summary generator
}

enum AgentStatus {
  idle          // Not yet processed
  processing    // Currently generating content
  completed     // Successfully generated
  error         // Failed to generate
}
