// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  auth0Id     String    @unique
  name        String?
  canvasUrl   String?   // Canvas LMS instance URL
  canvasToken String?   // Encrypted Canvas API token
  courses     Course[]
  files       File[]
  projects    Project[]
  createdAt   DateTime  @default(now())
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  archived    Boolean  @default(false)
  canvasState Json?    // Store canvas nodes, edges, and viewport
  files       File[]
  outputs     Output[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([userId, archived])
}

model Course {
  id         String   @id @default(cuid())
  name       String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  canvasId   String?  // Canvas course ID
  files      File[]
  createdAt  DateTime @default(now())
}

model File {
  id          String       @id @default(cuid())
  name        String
  type        String       // pdf, pptx, mp4, docx
  url         String
  key         String       // UploadThing file key for deletion
  size        Int          // File size in bytes
  mimeType    String?      // MIME type for proper handling
  status      String       @default("pending") // pending, processing, ready, error
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  projectId   String?      // Optional - files can belong to projects
  project     Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  courseId    String?      // Optional - files can be uploaded without course or from Canvas
  course      Course?      @relation(fields: [courseId], references: [id])
  canvasId    String?      // Canvas file ID
  transcripts Transcript[]
  outputs     Output[]     // Direct relation to outputs
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  @@index([projectId])
  @@index([userId])
}

model Transcript {
  id        String   @id @default(cuid())
  content   String   @db.Text
  fileId    String
  file      File     @relation(fields: [fileId], references: [id])
  outputs   Output[]
  createdAt DateTime @default(now())
}

model Output {
  id           String      @id @default(cuid())
  type         String      // notes, flashcards, quiz, slides
  content      Json
  projectId    String?
  project      Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  fileId       String?
  file         File?       @relation(fields: [fileId], references: [id], onDelete: Cascade)
  transcriptId String?
  transcript   Transcript? @relation(fields: [transcriptId], references: [id])
  
  // Context and regeneration fields
  userContext     String?   // User's additional instructions (e.g., "Make this quiz harder")
  agentContext    Json?     // Context from other connected agents
  previousOutputId String?  // Link to previous version for regeneration
  version         Int       @default(1) // Version number for tracking regenerations
  
  // Downloadable artifact fields
  artifactFileId String?    // Reference to generated file (UploadThing/storage key)
  artifactMimeType String?  // MIME type of generated artifact
  artifactFileName String?  // Original filename of artifact
  artifactFormat   String?  // Format: json, md, pptx, docx, pdf, csv, anki-txt
  artifactStatus   String   @default("none") // none, pending, ready, failed
  artifactError    String?  // Error message if generation failed
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt

  @@index([projectId])
  @@index([fileId])
  @@index([transcriptId])
  @@index([previousOutputId])
}
