/**
 * Slides Serializers - Convert slides to PPTX format
 * 
 * Purpose: Provides functions to serialize slide data into PowerPoint presentations
 */

import PptxGenJS from 'pptxgenjs';
import { Slide, SerializerResult } from './types';

/**
 * Convert slides to PPTX format using pptxgenjs
 */
export async function slidesToPptx(
  slides: Slide[],
  title = 'presentation'
): Promise<SerializerResult> {
  const pptx = new PptxGenJS();
  
  // Set presentation properties
  pptx.author = 'EduFlow AI';
  pptx.company = 'EduFlow';
  pptx.subject = title;
  pptx.title = title;
  
  // Define theme colors
  const primaryColor = '2563EB'; // Blue
  const textColor = '1F2937'; // Dark gray
  const lightBg = 'F9FAFB'; // Light gray
  
  // Add title slide
  const titleSlide = pptx.addSlide();
  titleSlide.background = { color: primaryColor };
  
  titleSlide.addText(title.toUpperCase(), {
    x: 0.5,
    y: 2.5,
    w: 9,
    h: 1.5,
    fontSize: 44,
    bold: true,
    color: 'FFFFFF',
    align: 'center',
  });
  
  titleSlide.addText('Generated by EduFlow AI', {
    x: 0.5,
    y: 4,
    w: 9,
    h: 0.5,
    fontSize: 18,
    color: 'E5E7EB',
    align: 'center',
  });
  
  // Add content slides
  for (let i = 0; i < slides.length; i++) {
    const slideData = slides[i];
    const slide = pptx.addSlide();
    
    // Add slide background
    slide.background = { color: 'FFFFFF' };
    
    // Add slide number
    slide.addText(`${i + 1}`, {
      x: 9.2,
      y: 5.2,
      w: 0.5,
      h: 0.3,
      fontSize: 14,
      color: '9CA3AF',
      align: 'right',
    });
    
    // Add title
    slide.addText(slideData.title, {
      x: 0.5,
      y: 0.5,
      w: 9,
      h: 0.8,
      fontSize: 32,
      bold: true,
      color: primaryColor,
    });
    
    // Add separator line
    slide.addShape(pptx.ShapeType.rect, {
      x: 0.5,
      y: 1.4,
      w: 9,
      h: 0.02,
      fill: { color: primaryColor },
    });
    
    // Get bullet points (support both 'bullets' and 'content' fields)
    const bullets = slideData.bullets || slideData.content || [];
    
    if (bullets.length > 0) {
      // Calculate spacing based on number of bullets
      const startY = 2.0;
      const maxBullets = 7;
      const bulletSpacing = bullets.length <= maxBullets ? 0.6 : 0.5;
      
      // Add bullet points
      for (let j = 0; j < Math.min(bullets.length, maxBullets); j++) {
        const bullet = bullets[j];
        const yPos = startY + (j * bulletSpacing);
        
        // Add bullet symbol
        slide.addText('•', {
          x: 0.7,
          y: yPos,
          w: 0.3,
          h: 0.4,
          fontSize: 24,
          color: primaryColor,
        });
        
        // Add bullet text
        slide.addText(bullet, {
          x: 1.2,
          y: yPos,
          w: 8.3,
          h: 0.5,
          fontSize: 18,
          color: textColor,
          valign: 'top',
        });
      }
      
      // If more bullets than max, add an indicator
      if (bullets.length > maxBullets) {
        slide.addText(`... and ${bullets.length - maxBullets} more points`, {
          x: 1.2,
          y: startY + (maxBullets * bulletSpacing),
          w: 8.3,
          h: 0.4,
          fontSize: 14,
          color: '6B7280',
          italic: true,
        });
      }
    }
    
    // Add footer
    slide.addText(title, {
      x: 0.5,
      y: 5.2,
      w: 8.5,
      h: 0.3,
      fontSize: 12,
      color: '9CA3AF',
    });
  }
  
  // Generate presentation buffer
  const buffer = await pptx.write({ outputType: 'nodebuffer' });
  
  return {
    buffer: Buffer.from(buffer as ArrayBuffer),
    mimeType: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    fileName: `${sanitizeFilename(title)}-slides-${Date.now()}.pptx`,
  };
}

/**
 * Convert slides to PDF format (via HTML intermediary)
 * Note: This is an alternative export format for slides
 */
export async function slidesToPdf(
  slides: Slide[],
  title = 'presentation'
): Promise<SerializerResult> {
  const htmlPdf = require('html-pdf-node');
  
  // Convert slides to HTML
  const html = slidesToHTML(slides, title);
  
  const options = {
    format: 'A4',
    landscape: true,
    margin: {
      top: '10mm',
      right: '10mm',
      bottom: '10mm',
      left: '10mm',
    },
  };
  
  const file = { content: html };
  
  try {
    const pdfBuffer = await htmlPdf.generatePdf(file, options);
    
    return {
      buffer: pdfBuffer,
      mimeType: 'application/pdf',
      fileName: `${sanitizeFilename(title)}-slides-${Date.now()}.pdf`,
    };
  } catch (error) {
    throw new Error(`Failed to generate slides PDF: ${error instanceof Error ? error.message : String(error)}`);
  }
}

// ============= Helper Functions =============

/**
 * Convert slides to HTML for PDF generation
 */
function slidesToHTML(slides: Slide[], title: string): string {
  let html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${escapeHTML(title)}</title>
  <style>
    @page {
      size: A4 landscape;
      margin: 0;
    }
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 0;
    }
    .slide {
      width: 297mm;
      height: 210mm;
      padding: 40px;
      box-sizing: border-box;
      page-break-after: always;
      position: relative;
      background: white;
    }
    .slide:last-child {
      page-break-after: auto;
    }
    .slide-title {
      font-size: 36px;
      font-weight: bold;
      color: #2563EB;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 3px solid #2563EB;
    }
    .slide-content {
      font-size: 20px;
      line-height: 1.8;
      color: #1F2937;
    }
    .slide-content ul {
      list-style: none;
      padding: 0;
      margin: 20px 0;
    }
    .slide-content li {
      margin-bottom: 20px;
      padding-left: 30px;
      position: relative;
    }
    .slide-content li:before {
      content: '•';
      position: absolute;
      left: 0;
      color: #2563EB;
      font-size: 28px;
      line-height: 1.2;
    }
    .slide-footer {
      position: absolute;
      bottom: 20px;
      left: 40px;
      right: 40px;
      font-size: 14px;
      color: #9CA3AF;
      display: flex;
      justify-content: space-between;
    }
    .title-slide {
      background: linear-gradient(135deg, #2563EB 0%, #1E40AF 100%);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      color: white;
    }
    .title-slide h1 {
      font-size: 52px;
      margin-bottom: 20px;
    }
    .title-slide p {
      font-size: 24px;
      color: #E5E7EB;
    }
  </style>
</head>
<body>
  <div class="slide title-slide">
    <h1>${escapeHTML(title)}</h1>
    <p>Generated by EduFlow AI</p>
  </div>
`;
  
  // Add content slides
  slides.forEach((slide, index) => {
    const bullets = slide.bullets || slide.content || [];
    
    html += `
  <div class="slide">
    <div class="slide-title">${escapeHTML(slide.title)}</div>
    <div class="slide-content">
      <ul>
`;
    
    bullets.forEach((bullet) => {
      html += `        <li>${escapeHTML(bullet)}</li>\n`;
    });
    
    html += `
      </ul>
    </div>
    <div class="slide-footer">
      <span>${escapeHTML(title)}</span>
      <span>${index + 1}</span>
    </div>
  </div>
`;
  });
  
  html += `
</body>
</html>`;
  
  return html;
}

/**
 * Escape HTML special characters
 */
function escapeHTML(text: string): string {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

/**
 * Sanitize filename to remove invalid characters
 */
function sanitizeFilename(filename: string): string {
  return filename
    .replace(/[^a-z0-9_-]/gi, '_')
    .replace(/_+/g, '_')
    .toLowerCase();
}
